{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\fernossa\\\\Development\\\\routing-start\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\Users\\\\fernossa\\\\Development\\\\routing-start\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\nimport { AuthService } from \"./auth.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport var AuthGuardService = /*#__PURE__*/(function () {\n  var AuthGuardService = /*#__PURE__*/function () {\n    function AuthGuardService(authService, router) {\n      _classCallCheck(this, AuthGuardService);\n\n      this.authService = authService;\n      this.router = router;\n    }\n\n    _createClass(AuthGuardService, [{\n      key: \"canActivate\",\n      value: function canActivate(route, state) {\n        var _this = this;\n\n        //throw new Error(\"Method not implemented.\");\n        return this.authService.isAuthenticated().then(function (authenticated) {\n          if (authenticated) {\n            return true;\n          } else {\n            _this.router.navigate(['/']);\n          }\n        });\n      }\n    }, {\n      key: \"canActivateChild\",\n      value: function canActivateChild(childRoute, state) {\n        //throw new Error(\"Method not implemented.\");\n        return this.canActivate(childRoute, state);\n      }\n    }]);\n\n    return AuthGuardService;\n  }();\n\n  AuthGuardService.ɵfac = function AuthGuardService_Factory(t) {\n    return new (t || AuthGuardService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuardService,\n    factory: AuthGuardService.ɵfac\n  });\n  return AuthGuardService;\n})();","map":{"version":3,"sources":["C:/Users/fernossa/Development/routing-start/src/app/authguard.service.ts"],"names":["ActivatedRouteSnapshot","Router","RouterStateSnapshot","UrlTree","AuthService","i0","i1","i2","AuthGuardService","authService","router","route","state","isAuthenticated","then","authenticated","navigate","childRoute","canActivate","ɵfac","AuthGuardService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";;AAAA,SAASA,sBAAT,EAAiCC,MAAjC,EAAyCC,mBAAzC,EAA8DC,OAA9D,QAA6E,iBAA7E;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,WAAaC,gBAAb;AAAA,MAAaA,gBAAb;AACI,8BAAYC,WAAZ,EAAyBC,MAAzB,EAAiC;AAAA;;AAC7B,WAAKD,WAAL,GAAmBA,WAAnB;AACA,WAAKC,MAAL,GAAcA,MAAd;AACH;;AAJL;AAAA;AAAA,aAKI,qBAAYC,KAAZ,EAAmBC,KAAnB,EAA0B;AAAA;;AACtB;AACA,eAAO,KAAKH,WAAL,CAAiBI,eAAjB,GAAmCC,IAAnC,CAAwC,UAACC,aAAD,EAAmB;AAC9D,cAAIA,aAAJ,EAAmB;AACf,mBAAO,IAAP;AACH,WAFD,MAGK;AACD,YAAA,KAAI,CAACL,MAAL,CAAYM,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACH;AACJ,SAPM,CAAP;AAQH;AAfL;AAAA;AAAA,aAgBI,0BAAiBC,UAAjB,EAA6BL,KAA7B,EAAoC;AAChC;AACA,eAAO,KAAKM,WAAL,CAAiBD,UAAjB,EAA6BL,KAA7B,CAAP;AACH;AAnBL;;AAAA;AAAA;;AAqBAJ,EAAAA,gBAAgB,CAACW,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,WAAO,KAAKA,CAAC,IAAIb,gBAAV,EAA4BH,EAAE,CAACiB,QAAH,CAAYhB,EAAE,CAACF,WAAf,CAA5B,EAAyDC,EAAE,CAACiB,QAAH,CAAYf,EAAE,CAACN,MAAf,CAAzD,CAAP;AAA0F,GAAzJ;;AACAO,EAAAA,gBAAgB,CAACe,KAAjB,GAAyB,aAAclB,EAAE,CAACmB,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAEjB,gBAAT;AAA2BkB,IAAAA,OAAO,EAAElB,gBAAgB,CAACW;AAArD,GAAtB,CAAvC;AAtBA,SAAaX,gBAAb;AAAA","sourcesContent":["import { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\nimport { AuthService } from \"./auth.service\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./auth.service\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class AuthGuardService {\r\n    constructor(authService, router) {\r\n        this.authService = authService;\r\n        this.router = router;\r\n    }\r\n    canActivate(route, state) {\r\n        //throw new Error(\"Method not implemented.\");\r\n        return this.authService.isAuthenticated().then((authenticated) => {\r\n            if (authenticated) {\r\n                return true;\r\n            }\r\n            else {\r\n                this.router.navigate(['/']);\r\n            }\r\n        });\r\n    }\r\n    canActivateChild(childRoute, state) {\r\n        //throw new Error(\"Method not implemented.\");\r\n        return this.canActivate(childRoute, state);\r\n    }\r\n}\r\nAuthGuardService.ɵfac = function AuthGuardService_Factory(t) { return new (t || AuthGuardService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router)); };\r\nAuthGuardService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuardService, factory: AuthGuardService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}